 {
    "CDN - User Behavior - Top Browsers": {
        "prereqs": [
            {
                "test": "| inputlookup cdn_connections.csv | stats count  ",
                "field": "count",
                "greaterorequalto": 1,
                "resolution": "Verify that lookups installed with Splunk Essentials for Telco is present",
                "name": "track_application_usage lookup file"
            }
        ],
        "description": [
            "First we pull in our demo dataset.",
            "",
            "Only use the field(s) we want..",
            "Analyze our data set by Browser type now.. ",
            "Here we pull out the OS string and do some matching. This is pretty basic. There are apps on SplunkBase that do a better job.",
            "Here we pull out the browser type. Again this is pretty basic and now where complete. There are apps for this...",
            "Same here, but for arch type..",
            "Make the search results a bit prettier..",
            "And find our browsers.."
        ],
        "value": "| inputlookup cdn_connections \n| sort - _time \n| fields _time http_user_agent \n| rename http_user_agent AS useragent \n| eval os = case(match(useragent,\"Windows .. 5.1\"),\"Windows XP\",match(useragent,\"droid\"),\"Android\",match(useragent,\"Windows NT 6.1\"),\"Windows 7\",match(useragent,\"Win98\"),\"Windows 98\",match(useragent,\"Windows NT 6.3\"),\"Windows Server 2012\",match(useragent,\"Windows NT 6.2\"),\"Windows 8\",match(useragent,\"Windows NT 6.0\"),\"Windows Server 2008\",match(useragent,\"Windows Phone 8.1\"),\"Windows Mobile 8\",match(useragent,\"Mac OS X 10.10\"),\"OSX 10.10\",match(useragent,\"Mac OS X 10_9\"),\"OSX 10.9\",match(useragent,\"Mac OS X 10.6\"),\"OSX 10.6\",match(useragent,\"Mac OS X 10.5\"),\"OSX 10.5\",match(useragent,\"Mac OS X 10_8\"),\"OSX 10.8\",match(useragent,\"Mac OS X 10_7\"),\"OSX 10.7\",match(useragent,\"Apple TV\"),\"IOS\",match(useragent,\"iPad\"),\"IOS\",match(useragent,\"iPhone\"),\"IOS\",match(useragent,\"linux|Linux\"),\"Linux\") \n| eval browser = case(match(useragent,\"MSIE 10.0\"),\"IE 10.0\",match(useragent,\"MSIE 7.0\"),\"IE 7.0\",match(useragent,\"Chrome\"),\"Chrome\",match(useragent,\"Safari/\"),\"Safari\",match(useragent,\"Firefox\"),\"Firefox\",match(useragent,\"MSIE 9.0\"),\"IE 9.0\",match(useragent,\"ANVSDK ios\"),\"Anvato Player\",match(useragent,\"UCBrowser\"),\"UC Browser\",match(useragent,\"Opera\"),\"Opera\",match(useragent,\"Gecko Galeon\"),\"Gecko\",match(useragent,\"Netscape6\"),\"Netscape\") \n| eval arch = case(match(useragent,\"droid\"),\"android\",match(useragent,\"iPad\"),\"ipad\",match(useragent,\"iPod\"),\"ipod\",match(useragent,\"Apple TV\"),\"Apple TV\",match(useragent,\"iPhone\"),\"iphone\",match(os,\"Windows\"),\"x86_64\",match(useragent,\"Intel|x86_64\"),\"x86_64\") \n| fillnull value=\"UNKNOWN\" os arch browser \n| stats count by browser \n| sort - count",
        "label": "CDN - User Behavior - Top Browsers"
    },

    "Security Auditing - Badge Monitoring": {
        "prereqs": [
            {
                "test": "| inputlookup physical_card_logs.csv | stats count  ",
                "field": "count",
                "greaterorequalto": 1,
                "resolution": "Verify that lookups installed with Splunk Essentials for Telco is present",
                "name": "track_application_usage lookup file"
            }
        ],
        "description": [
            "First we pull in our demo dataset.",
            "",
            "Enrich our data...",
            "Enrich our data... ",
            "Here we will search for a specific Employee Identifier.",
            "Narrow our interesting fields down a bit..",
            "",
            "",
            "Make this more Human Readable.."
        ],
        "value": "| inputlookup physical_card_logs \n| lookup physical_card_error_codes errorCode OUTPUTNEW status \n| lookup physical_card_mapping readerID AS badgereaderId OUTPUTNEW description \n| lookup physical_card_user_mapping cardId AS badgeId OUTPUTNEW firstName lastName emailAddress employeeId note officeId \n| search employeeId=\"25020002\" \n| fields - badgereaderId,envAlarm,errorCode,powerStatus \n| eval fullName = firstName+\" \"+lastName \n| fields _time badgeId employeeId fullName officeId description status note \n| rename badgeId AS \"Badge ID #\" employeeId AS \"Employee Number\" fullName AS \"Employee Name\" officeId AS \"Home Office\" description AS \"Card Reader Location\" status AS \"Read Status\" note AS \"Additional Notes..\"",
                "label": "Security Auditing - Badge Monitoring"
    },

    "Security Auditing - Secure Facilities": {
        "prereqs": [
            {
                "test": "| inputlookup physical_card_logs.csv | stats count  ",
                "field": "count",
                "greaterorequalto": 1,
                "resolution": "Verify that lookups installed with Splunk Essentials for Telco is present",
                "name": "track_application_usage lookup file"
            }
        ],
        "description": [
            "First we pull in our demo dataset.",
            "Enrich our data...",
            "Enrich our data... ",
            "Perform some statistical analysis on the Room, Status of the Reader, and the Badge.",
            "For this example, we mask Internal Employees Id's and Customer's Badges.",
            "Figure out the direction of the badge read based on the actual card reader.",
            "Match our room and give it a more human friendly name.",
            "Select our fields for reporting.",
            "Bit more of clean up..",
            "",
            "Can you read epoch? Convert this to readable form."
        ],
        "value": "| inputlookup physical_card_logs \n| lookup physical_card_mapping readerID AS badgereaderId OUTPUTNEW description active \n| lookup physical_card_user_mapping cardId AS badgeId \n| search description=\"LV-DC-2-DC-003-*\" \n| stats count list(description) AS Room list(status) AS Status list(badgeId) AS BadgeID list(employeeId) AS userId by _time \n| eval Personnel=if(match(userId,\"-\"),\"Customer Card\",\"Splunk Datacenter Staff\") \n| eval Direction=case(match(Room,\"-in\"),\"Ingress\",match(Room,\"-out\"),\"Egress\") \n| eval Room=case(match(Room,\"LV-DC-2-DC-003-\"),\"Secure Room - 3\") \n| fields _time Room Personnel Direction \n| rename _time AS \"Time\" \n| convert ctime(Time)",
              "label": "Security Auditing - Secure Facilities"
    },

    "Security Auditing - Abnormal Failures": {
        "prereqs": [
            {
                "test": "| inputlookup physical_card_logs.csv | stats count  ",
                "field": "count",
                "greaterorequalto": 1,
                "resolution": "Verify that lookups installed with Splunk Essentials for Telco is present",
                "name": "track_application_usage lookup file"
            }
        ],
        "description": [
            "First we pull in our demo dataset.",
            "Enrich our data...",
            "Enrich our data... ",
            "Perform some statistical analysis on the Room, Status of the Reader, and the Badge.",
            "For this example, we mask Internal Employees Id's and Customer's Badges.",
            "Figure out the direction of the badge read based on the actual card reader.",
            "Match our room and give it a more human friendly name.",
            "Select our fields for reporting.",
            "Bit more of clean up..",
            "",
            "Can you read epoch? Convert this to readable form."
        ],
        "value": "| inputlookup physical_card_logs \n| lookup physical_card_error_codes errorCode OUTPUTNEW status \n| lookup physical_card_mapping readerID AS badgereaderId OUTPUTNEW description active \n| lookup physical_card_user_mapping cardId AS badgeId \n| eval fullName=firstName+\" \"+lastName \n| fields _time badgeId description fullName status \n| search status=\"ACCESS-DENIED\" OR status=\"READ-SUCCESS\" \n| streamstats count reset_on_change=true window=2 by description \n| search (count > 1) AND status=\"ACCESS-DENIED\" \n| bin span=5m _time \n| stats count list(badgeId) AS Badge list(description) AS Location list(fullName) as Name by _time \n| where count > 1 \n| rename _time AS Time \n| convert ctime(Time) \n| table Time Location Badge Name",
        "label": "Security Auditing - Abnormal Failures"
    },

    "Security Auditing - Environmental Check": {
        "prereqs": [
            {
                "test": "| inputlookup physical_card_logs.csv | stats count  ",
                "field": "count",
                "greaterorequalto": 1,
                "resolution": "Verify that lookups installed with Splunk Essentials for Telco is present",
                "name": "track_application_usage lookup file"
            }
        ],
        "description": [
            "First we pull in our demo dataset.",
            "Enrich our data...",
            "Enrich our data... ",
            "Reduce our data set to only our interesting fields for this example.",
            "Filter for only FIRE or POWER events."
                    ],
        "value": "| inputlookup physical_card_logs \n| lookup physical_card_error_codes errorCode OUTPUTNEW status \n| lookup physical_card_mapping readerID AS badgereaderId OUTPUTNEW description\n| fields _time badgereaderId description envAlarm errorCode powerStatus status \n| search envAlarm=\"FIRE\" OR envAlarm=\"POWER\"",        
        "label": "Security Auditing - Environmental Check"
    },
    
    "Security Auditing - Environmental Reporting": {
        "prereqs": [
            {
                "test": "| inputlookup physical_card_logs.csv | stats count  ",
                "field": "count",
                "greaterorequalto": 1,
                "resolution": "Verify that lookups installed with Splunk Essentials for Telco is present",
                "name": "track_application_usage lookup file"
            }
        ],
        "description": [
            "First we pull in our demo dataset.",
            "Enrich our data...",
            "Enrich our data... ",
            "Filter for only FIRE or POWER events.",
            "Sort by time, we need to make sure our data set is in order..",
            "Filter through events by description, and keep track of when the last reader was seen",
            "Calculate a duration between related events",
            "",
            "Fill null numeric values with a 0 to make sorting easier..",
            "Humanize the Events..",
            "Take our relevant fields and make a report friendly view.."
                    ],
        "value": "| inputlookup physical_card_logs \n| lookup physical_card_mapping readerID AS badgereaderId OUTPUTNEW description \n| lookup physical_card_error_codes errorCode OUTPUT status \n| search envAlarm=\"FIRE\" OR envAlarm=\"POWER\" \n| sort _time \n| streamstats window=0 current=false latest(_time) AS previousEventTime latest(status) AS previousStatus BY description \n| eval duration = _time - previousEventTime \n| rename status AS currentStatus \n| fillnull value=0 duration \n| eval envAlarm=case(match(envAlarm,\"FIRE\"),\"Fire Alarm Detected in Zone\",match(envAlarm,\"POWER\"),\"Power Event Detected in Zone\") \n| fields _time description currentStatus duration envAlarm \n| rename description AS \"Reader Location\" currentStatus AS \"Lock Status\" envAlarm AS \"Alarm\" \n| convert ctime(previousEventTime) \n| where duration > 0 \n| rename duration AS \"Duration of Alarm (seconds)\" _time AS \"Time Cleared\" \n| convert ctime(\"Time Cleared\") \n| table Alarm \"Reader Location\" \"Lock Status\" \"Duration of Alarm (seconds)\" \"Time Cleared\"",       
        "label": "Security Auditing - Environmental Reporting"
    },

    "Splunk Insights - AWS Cloudwatch Logs  Metrics - Demo": {
        "prereqs": [
            {
                "test": "|inputlookup splunk_insights_-_aws_cloudwatch_logs__metrics | stats count  ",
                "field": "count",
                "greaterorequalto": 1,
                "resolution": "Verify that lookups installed with Splunk Essentials for Application Analytics is present",
                "name": "splunk_insights_-_aws_cloudwatch_logs__metrics lookup file"
            }
        ],
        "description": [
            "First we pull in our demo dataset.",
            "<enter comments for line 2 of your search>",
            "<enter comments for line 3 of your search>",
            "..."
        ],
        "value": "|inputlookup splunk_insights_-_aws_cloudwatch_logs__metrics | search  ADD_REAL_SPL_HERE",
        "label": "Splunk Insights - AWS Cloudwatch Logs  Metrics - Demo"
    }
}
